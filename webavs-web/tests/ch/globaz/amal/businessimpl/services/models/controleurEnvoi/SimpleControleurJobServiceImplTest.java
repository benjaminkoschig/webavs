/**
 * 
 */
package ch.globaz.amal.businessimpl.services.models.controleurEnvoi;

import globaz.jade.context.JadeThread;
import globaz.jade.exception.JadePersistenceException;
import globaz.jade.log.business.JadeBusinessMessageLevels;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import ch.globaz.amal.business.constantes.IAMCodeSysteme;
import ch.globaz.amal.business.exceptions.models.controleurJob.ControleurJobException;
import ch.globaz.amal.business.models.controleurEnvoi.SimpleControleurJob;
import ch.globaz.amal.business.models.controleurEnvoi.SimpleControleurJobSearch;
import ch.globaz.amal.businessimpl.services.AmalImplServiceLocator;

/**
 * @author DHI
 * 
 */
public class SimpleControleurJobServiceImplTest {

    /**
     * @param name
     * 
     * 
     *            /**
     *            Test de la création d'un job en db
     */
    @Ignore
    @Test
    public void testCreate() {

        try {
            // Création d'un job avec des paramètres erronés dans le modèle
            // Attente de résultat >> JadeThread.hasMessage à true, le checker réagit
            SimpleControleurJob currentJob = new SimpleControleurJob();
            currentJob.setStatusEnvoi("-2");
            currentJob.setDescriptionJob(null);
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().create(currentJob);
            } catch (Exception ex) {
                Assert.fail("Exception soulevée lors de la création d'un job avec paramètres erronés " + ex.toString());
            }
            Assert.assertEquals(true, JadeThread.logHasMessagesFromLevel(JadeBusinessMessageLevels.ERROR));
            JadeThread.logClear();
            // Création d'un job avec des paramètres corrects
            // Attente de résultat >> modèle renseigné avec isNew à false
            currentJob = new SimpleControleurJob();
            currentJob.setDateJob("01.01.2011");
            currentJob.setDescriptionJob("Job de JUNIT");
            currentJob.setStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue());
            currentJob.setTypeJob(IAMCodeSysteme.AMJobType.JOBPROCESS.getValue());
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().create(currentJob);
            } catch (Exception ex) {
                Assert.fail("Exception soulevée lors de la création d'un job avec paramètres corrects " + ex.toString());
            }
            Assert.assertEquals(false, JadeThread.logHasMessagesFromLevel(JadeBusinessMessageLevels.ERROR));
            JadeThread.logClear();
            Assert.assertEquals(false, currentJob.isNew());
            Assert.assertEquals("01.01.2011", currentJob.getDateJob());
            Assert.assertEquals("Job de JUNIT", currentJob.getDescriptionJob());
            Assert.assertEquals(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue(), currentJob.getStatusEnvoi());
            Assert.assertEquals(IAMCodeSysteme.AMJobType.JOBPROCESS.getValue(), currentJob.getTypeJob());
        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        } finally {
            // doFinally();
            JadeThread.logClear();
        }

    }

    /**
     * Test de la suppression d'un job
     */
    @Ignore
    @Test
    public void testDelete() {
        try {
            SimpleControleurJob currentJob = new SimpleControleurJob();

            // Effacement d'un job null
            // Attente de résultat >> exception de type JobException
            boolean bJobException = false;
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().delete(null);
            } catch (ControleurJobException ex) {
                bJobException = true;
            }
            Assert.assertEquals(true, bJobException);

            // Effacement d'un job qui est nouveau >> isNew = true
            // Attente de résultat >> exception !
            boolean bJadePersistenceException = false;
            currentJob = new SimpleControleurJob();
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().delete(currentJob);
            } catch (JadePersistenceException ex) {
                bJadePersistenceException = true;
            }
            Assert.assertEquals(true, bJadePersistenceException);

            // Effacement d'un job existante
            // Attente de résultat >> effacement NOK car contient des envois
            currentJob = AmalImplServiceLocator.getSimpleControleurJobService().read("1");
            boolean bDeleteNOK = true;
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().delete(currentJob);
            } catch (Exception ex) {
                bDeleteNOK = false;
            }
            Assert.assertEquals(true, bDeleteNOK);
            Assert.assertEquals(true, JadeThread.logHasMessagesFromLevel(JadeBusinessMessageLevels.ERROR));

        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        } finally {
            // doFinally();
        }
    }

    /**
     * Test de la lecture d'un job
     */
    @Ignore
    @Test
    public void testRead() {
        try {
            // Lecture d'un job avec un id bidon
            // Attente de résultat >> currentJob id=-1, tous les autres champs sont null
            SimpleControleurJob currentJob = AmalImplServiceLocator.getSimpleControleurJobService().read("-1");
            Assert.assertEquals("-1", currentJob.getId());
            Assert.assertEquals("-1", currentJob.getIdJob());
            Assert.assertNull(currentJob.getDateJob());
            Assert.assertNull(currentJob.getDescriptionJob());
            Assert.assertNull(currentJob.getStatusEnvoi());
            Assert.assertNull(currentJob.getTypeJob());
            Assert.assertEquals(true, currentJob.isNew());
            // Lecture d'un document avec un id OK
            // Attente de résultat >> un modèle renseigné et exploitable
            currentJob = AmalImplServiceLocator.getSimpleControleurJobService().read("1");
            Assert.assertEquals("1", currentJob.getId());
            Assert.assertEquals("1", currentJob.getIdJob());
            Assert.assertNotNull(currentJob.getDateJob());
            Assert.assertNotNull(currentJob.getDescriptionJob());
            Assert.assertNotNull(currentJob.getStatusEnvoi());
            Assert.assertNotNull(currentJob.getTypeJob());
            Assert.assertEquals(false, currentJob.isNew());
        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        } finally {
            // doFinally();
        }
    }

    /**
     * Test de la recherche d'un job
     */
    @Ignore
    @Test
    public void testSearch() {
        try {
            // Recherche d'un job avec des critères de recherche erronés
            // Attente de résultat >> nombre de résultat = 0
            SimpleControleurJobSearch jobSearch = new SimpleControleurJobSearch();
            jobSearch.setForIdJob("-2233");
            jobSearch = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearch);
            int iNbResults = jobSearch.getSize();
            Assert.assertEquals(true, (iNbResults <= 0));

            // Recherche d'un job avec des critères de recherche ciblés
            // Attente de résultat >> nombre de résultat = 1
            // Attente de résultat >> résultat exploitable (modèle)
            jobSearch = new SimpleControleurJobSearch();
            jobSearch.setForIdJob("1");
            jobSearch = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearch);
            iNbResults = jobSearch.getSize();
            Assert.assertEquals(true, (iNbResults == 1));
            SimpleControleurJob currentJob = (SimpleControleurJob) jobSearch.getSearchResults()[0];
            // Attente de résultat >> un modèle renseigné et exploitable
            Assert.assertEquals("1", currentJob.getId());
            Assert.assertEquals("1", currentJob.getIdJob());
            Assert.assertNotNull(currentJob.getDateJob());
            Assert.assertNotNull(currentJob.getDescriptionJob());
            Assert.assertNotNull(currentJob.getStatusEnvoi());
            Assert.assertNotNull(currentJob.getTypeJob());
            Assert.assertEquals(false, currentJob.isNew());

            // Recherche d'un job sans critères de recherche
            // Attente de résultat >> nombre de résultat >= 1
            jobSearch = new SimpleControleurJobSearch();
            jobSearch = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearch);
            iNbResults = jobSearch.getSize();
            Assert.assertEquals(true, (iNbResults >= 1));

        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        } finally {
            // doFinally();
        }
    }

    /**
     * Test de la mise à jour d'un job
     */
    @Ignore
    @Test
    public void testUpdate() {
        try {
            // Mise à jour d'un job qui est nouveau >> isNew = true
            // Attente de résultat >> persistence exception
            SimpleControleurJob currentJob = new SimpleControleurJob();
            currentJob.setDateJob("01.01.2011");
            currentJob.setDescriptionJob("Job de JUNIT");
            currentJob.setStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue());
            currentJob.setTypeJob(IAMCodeSysteme.AMJobType.JOBPROCESS.getValue());
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().update(currentJob);
                Assert.fail("Exception non soulevée lors de la mise à jour d'un job isNew");
            } catch (JadePersistenceException ex) {
            }
            Assert.assertEquals(false, JadeThread.logHasMessagesFromLevel(JadeBusinessMessageLevels.ERROR));

            // Mise à jour d'un job existant avec des paramètres erronés
            // Attente de résultat >> Message dans JadeThread levé par le checker
            currentJob = AmalImplServiceLocator.getSimpleControleurJobService().read("1");
            currentJob.setStatusEnvoi("-20");
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().update(currentJob);
            } catch (Exception ex) {
                Assert.fail("Exception soulevée lors de la mise à jour d'un job avec paramètres erronés "
                        + ex.toString());
            }
            Assert.assertEquals(true, JadeThread.logHasMessagesFromLevel(JadeBusinessMessageLevels.ERROR));
            JadeThread.logClear();
            // Mise à jour d'un job existant avec des paramètres corrects
            // Attente de résultat >> modèle renseigné en retour = modèle de base updaté
            currentJob = AmalImplServiceLocator.getSimpleControleurJobService().read("1");
            currentJob.setDateJob("01.01.2011");
            currentJob.setDescriptionJob("Job de JUNIT");
            currentJob.setStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue());
            currentJob.setTypeJob(IAMCodeSysteme.AMJobType.JOBPROCESS.getValue());
            try {
                currentJob = AmalImplServiceLocator.getSimpleControleurJobService().update(currentJob);
            } catch (Exception ex) {
                Assert.fail("Exception soulevée lors de la mise à jour d'un job avec paramètres corrects "
                        + ex.toString());
            }
            Assert.assertEquals(false, JadeThread.logHasMessagesFromLevel(JadeBusinessMessageLevels.ERROR));
            Assert.assertEquals(false, currentJob.isNew());
            Assert.assertEquals("01.01.2011", currentJob.getDateJob());
            Assert.assertEquals("Job de JUNIT", currentJob.getDescriptionJob());
            Assert.assertEquals(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue(), currentJob.getStatusEnvoi());
            Assert.assertEquals(IAMCodeSysteme.AMJobType.JOBPROCESS.getValue(), currentJob.getTypeJob());
        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        } finally {
            // doFinally();
            JadeThread.logClear();
        }
    }

}

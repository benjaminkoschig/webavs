/**
 * 
 */
package globaz.amal.vb.controleurEnvoi;

import globaz.amal.process.envoi.EnvoiFormuleProcess;
import globaz.globall.db.BProcessLauncher;
import globaz.globall.db.BSession;
import globaz.globall.db.BSessionUtil;
import globaz.globall.db.BSpy;
import globaz.globall.parameters.FWParametersCode;
import globaz.globall.parameters.FWParametersSystemCodeManager;
import globaz.globall.util.JAVector;
import globaz.globall.vb.BJadePersistentObjectViewBean;
import globaz.jade.client.util.JadeStringUtil;
import globaz.jade.exception.JadePersistenceException;
import globaz.jade.log.JadeLogger;
import globaz.jade.persistence.model.JadeAbstractModel;
import globaz.jade.service.provider.application.util.JadeApplicationServiceNotAvailableException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import ch.globaz.amal.business.constantes.IAMCodeSysteme;
import ch.globaz.amal.business.models.controleurEnvoi.ComplexControleurEnvoi;
import ch.globaz.amal.business.models.controleurEnvoi.ComplexControleurEnvoiDetail;
import ch.globaz.amal.business.models.controleurEnvoi.ComplexControleurEnvoiDetailSearch;
import ch.globaz.amal.business.models.controleurEnvoi.ComplexControleurEnvoiSearch;
import ch.globaz.amal.business.models.controleurEnvoi.SimpleControleurEnvoiStatus;
import ch.globaz.amal.business.models.controleurEnvoi.SimpleControleurEnvoiStatusSearch;
import ch.globaz.amal.business.models.controleurEnvoi.SimpleControleurJob;
import ch.globaz.amal.business.models.controleurEnvoi.SimpleControleurJobSearch;
import ch.globaz.amal.business.models.detailfamille.SimpleDetailFamille;
import ch.globaz.amal.business.models.documents.SimpleDocument;
import ch.globaz.amal.business.models.famille.SimpleFamille;
import ch.globaz.amal.business.services.AmalServiceLocator;
import ch.globaz.amal.businessimpl.services.AmalImplServiceLocator;

/**
 * @author DHI
 * 
 */
public class AMControleurEnvoiViewBean extends BJadePersistentObjectViewBean {

    private String applyNewStatus = null;
    private ComplexControleurEnvoiDetailSearch[] jobAutoGenerated = null;
    private ComplexControleurEnvoiDetailSearch[] jobManualGenerated = null;
    private ComplexControleurEnvoiSearch[] jobProcessGenerated = null;
    private SimpleControleurJobSearch jobSearchedAuto = null;
    private SimpleControleurJobSearch jobSearchedManual = null;
    private SimpleControleurJobSearch jobSearchedProcess = null;
    private String selectedJob = null;
    private String selectedStatus = null;
    private SimpleControleurEnvoiStatusSearch statusSearched = null;

    /*
     * (non-Javadoc)
     * 
     * @see globaz.globall.db.BIPersistentObject#add()
     */
    @Override
    public void add() throws Exception {
        JadeLogger.info(this, "Penses à implémenter l\'ajout");
    }

    /**
     * Change the status of the selected items or job
     * 
     * @throws Exception
     */
    public void changeStatus() throws Exception {

        // -----------------------------------
        // INPUT VALUES
        // -----------------------------------
        ArrayList<String> allIds = null;
        String idJobForProcess = null;
        if ((selectedStatus != null) && (selectedStatus.length() > 0)) {
            allIds = new ArrayList<String>();
            String[] itemsToChange = selectedStatus.split(",");
            for (int iItem = 0; iItem < itemsToChange.length; iItem++) {
                String currentStatus = itemsToChange[iItem];
                allIds.add(currentStatus);
            }
        } else if ((selectedJob != null) && (selectedJob.length() > 0)) {
            idJobForProcess = selectedJob;
        }

        // -----------------------------------
        // process preparation
        // -----------------------------------
        EnvoiFormuleProcess process = new EnvoiFormuleProcess();
        process.setIdItem(allIds);
        process.setIdJob(idJobForProcess);
        process.setChangeStatusOnly(true);
        process.setNewStatus(getApplyNewStatus());
        process.setSession(BSessionUtil.getSessionFromThreadContext());

        String savedStatus = null;

        try {
            // AVANT TRAITEMENT METTRE LE STATUS A IN PROGRESS (ITEM VS JOB)
            // -----------------------------------
            savedStatus = setPrintStatusInProgress(allIds, idJobForProcess);
            // Launch the process
            // -----------------------------------
            BProcessLauncher.start(process, false);
        } catch (Exception e) {
            JadeLogger.error(this, "Error Launching Process processEnvoiStatus : " + e.getMessage());
            // Restore l'ancien status en cas de mmmmm
            // -----------------------------------
            restorePrintStatusSavedProgress(allIds, idJobForProcess, savedStatus);
        }

    }

    /*
     * (non-Javadoc)
     * 
     * @see globaz.globall.db.BIPersistentObject#delete()
     */
    @Override
    public void delete() throws Exception {
        if ((selectedStatus != null) && (selectedStatus.length() > 0)) {
            String[] itemsToRemove = selectedStatus.split(",");
            for (int iItem = 0; iItem < itemsToRemove.length; iItem++) {
                String currentStatus = itemsToRemove[iItem];
                AmalImplServiceLocator.getSimpleControleurEnvoiStatusService().delete(currentStatus);
            }
        } else if ((selectedJob != null) && (selectedJob.length() > 0)) {
            AmalServiceLocator.getControleurEnvoiService().delete(selectedJob);
        }
    }

    /**
     * @return the applyNewStatus
     */
    public String getApplyNewStatus() {
        return applyNewStatus;
    }

    /*
     * (non-Javadoc)
     * 
     * @see globaz.globall.db.BIPersistentObject#getId()
     */
    @Override
    public String getId() {
        return "-1";
    }

    /**
     * @return the jobAutoGenerated
     */
    public ComplexControleurEnvoiDetailSearch[] getJobAutoGenerated() {
        if (jobAutoGenerated == null) {
            jobAutoGenerated = new ComplexControleurEnvoiDetailSearch[0];
        }
        return jobAutoGenerated;
    }

    /**
     * 
     * @param searchModel
     * @return get the number of auto generated job for a specific job number
     */
    public String getJobCount(ComplexControleurEnvoiDetailSearch searchModel) {
        int iCounter = 0;
        try {
            iCounter = AmalServiceLocator.getControleurEnvoiService().count(searchModel);
        } catch (JadeApplicationServiceNotAvailableException e) {
            JadeLogger.info(this, "Exception when getting the job count : " + e.toString());
        } catch (JadePersistenceException e) {
            JadeLogger.info(this, "Exception when getting the job count : " + e.toString());
        }
        return String.format("%d", iCounter);
    }

    /**
     * 
     * @param searchModel
     * @return get the number of auto generated job for a specific job number
     */
    public String getJobCount(ComplexControleurEnvoiSearch searchModel) {
        int iCounter = 0;
        try {
            iCounter = AmalServiceLocator.getControleurEnvoiService().count(searchModel);
        } catch (JadeApplicationServiceNotAvailableException e) {
            JadeLogger.info(this, "Exception when getting the job count : " + e.toString());
        } catch (JadePersistenceException e) {
            JadeLogger.info(this, "Exception when getting the job count : " + e.toString());
        }
        return String.format("%d", iCounter);
    }

    /**
     * 
     * @param jobId
     * @return get the Number of Document in the job
     */
    public String getJobCount(String jobId) {
        int iCounter = 0;
        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  Get Job Count");
        statusSearched = new SimpleControleurEnvoiStatusSearch();
        statusSearched.setForIdJob(jobId);
        try {
            iCounter = AmalImplServiceLocator.getSimpleControleurEnvoiStatusService().count(statusSearched);
        } catch (Exception e) {
            JadeLogger.info(this, "Exception when getting the job count : " + e.toString());
        }
        return String.format("%d", iCounter);
    }

    /**
     * @return the jobManualGenerated
     */
    public ComplexControleurEnvoiDetailSearch[] getJobManualGenerated() {
        if (jobManualGenerated == null) {
            jobManualGenerated = new ComplexControleurEnvoiDetailSearch[0];
        }
        return jobManualGenerated;
    }

    /**
     * @return the jobProcessGenerated
     */
    public ComplexControleurEnvoiSearch[] getJobProcessGenerated() {
        if (jobProcessGenerated == null) {
            jobProcessGenerated = new ComplexControleurEnvoiSearch[0];
        }
        return jobProcessGenerated;
    }

    /**
     * @return the jobSearchedAuto
     */
    public SimpleControleurJobSearch getJobSearchedAuto() {
        if (jobSearchedAuto == null) {
            jobSearchedAuto = new SimpleControleurJobSearch();
        }
        return jobSearchedAuto;
    }

    /**
     * @return the jobSearchedManual
     */
    public SimpleControleurJobSearch getJobSearchedManual() {
        if (jobSearchedManual == null) {
            jobSearchedManual = new SimpleControleurJobSearch();
        }
        return jobSearchedManual;
    }

    /**
     * @return the jobSearchedProcess
     */
    public SimpleControleurJobSearch getJobSearchedProcess() {
        if (jobSearchedProcess == null) {
            jobSearchedProcess = new SimpleControleurJobSearch();
        }
        return jobSearchedProcess;
    }

    /**
     * @param id
     *            ID du code système
     * 
     * @return libelle général du code système correspondant
     * 
     */
    public String getLibelleCodeSysteme(String id) {
        if ((id == null) || (id.length() <= 0)) {
            return "";
        }

        FWParametersSystemCodeManager cm = new FWParametersSystemCodeManager();

        cm.setSession(getSession());
        cm.setForCodeUtilisateur(getSession().getCode(id));
        cm.setForIdGroupe("AMMODELES");
        cm.setForIdLangue(getSession().getIdLangue());
        try {
            cm.find();
        } catch (Exception e) {
            e.printStackTrace();
        }

        String csRetour = "";

        JAVector containerCS = cm.getContainer();
        if ((containerCS == null) || (containerCS.size() > 1)) {
            return csRetour;
        }
        for (Iterator it = containerCS.iterator(); it.hasNext();) {
            FWParametersCode code = (FWParametersCode) it.next();

            // Création de la string visible dans la combobox
            String documentValeur = code.getLibelle().trim();

            String documentCodeUtilisateur = code.getCurrentCodeUtilisateur().getCodeUtilisateur().trim();
            // String csCodeLibelle = code.getCurrentCodeUtilisateur().getLibelle().trim();

            // String csCodeLibelle = code.getCodeUtilisateur(this.getSession().getIdLangue()).getLibelle().trim();

            csRetour += documentCodeUtilisateur + " - ";
            csRetour += documentValeur; // + " - ";
            // csRetour += csCodeLibelle;
        }
        return csRetour;

    }

    /**
     * @return the selectedJob
     */
    public String getSelectedJob() {
        return selectedJob;
    }

    /**
     * @return the selectedStatus
     */
    public String getSelectedStatus() {
        return selectedStatus;
    }

    private BSession getSession() {
        return (BSession) getISession();
    }

    /*
     * (non-Javadoc)
     * 
     * @see globaz.globall.vb.BJadePersistentObjectViewBean#getSpy()
     */
    @Override
    public BSpy getSpy() {
        // if(this.statusSearched)
        return null;
    }

    /**
     * Retourne le status du job directement depuis la db
     * 
     * @param jobId
     * @return status
     * @throws JadePersistenceException
     * @throws JadeApplicationServiceNotAvailableException
     */
    public String getStatusJob(String jobId) throws JadeApplicationServiceNotAvailableException,
            JadePersistenceException {
        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  Get Job Status");

        // READ AND GET COUNT
        try {
            SimpleControleurJob currentJob = new SimpleControleurJob();
            currentJob = AmalImplServiceLocator.getSimpleControleurJobService().read(jobId);
            return currentJob.getStatusEnvoi();
        } catch (Exception ex) {
            JadeLogger.error(this, "Error getting job Status : " + ex.toString());
            return "";
        }

        /*
         * SimpleControleurJobSearch search = new SimpleControleurJobSearch(); search.setForIdJob(jobId); search =
         * AmalImplServiceLocator.getSimpleControleurJobService().search(search); if (search.getSize() > 0) { return
         * ((SimpleControleurJob) search.getSearchResults()[0]).getStatusEnvoi(); } else { return ""; }
         */

    }

    /**
     * Retourne la liste à afficher dans la combobox de sélection de status pour un document
     * 
     * HashMap<value, libelle>
     * 
     * @param controleurEnvoi
     * @return
     */
    public HashMap<String, String> getStatusListDocument(ComplexControleurEnvoi controleurEnvoi) {
        HashMap<String, String> aReturn = new HashMap<String, String>();

        for (int iIndexCS = 0; iIndexCS < IAMCodeSysteme.AMDocumentStatus.values().length; iIndexCS++) {
            String key = IAMCodeSysteme.AMDocumentStatus.values()[iIndexCS].getValue();
            String value = getSession().getCodeLibelle(key);
            aReturn.put(key, value);
            if (controleurEnvoi.getTypeJob().equals(IAMCodeSysteme.AMJobType.JOBMANUALEDITED.getValue())) {
                aReturn.remove(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue());
            } else {
                aReturn.remove(IAMCodeSysteme.AMDocumentStatus.MANUALGENERATED.getValue());
            }
            aReturn.remove(IAMCodeSysteme.AMDocumentStatus.INPROGRESS.getValue());
            aReturn.remove(IAMCodeSysteme.AMDocumentStatus.ERROR.getValue());
        }

        return aReturn;
    }

    /**
     * Retourne la liste à afficher dans la combobox de sélection de status pour un document
     * 
     * HashMap<value, libelle>
     * 
     * @param controleurEnvoi
     * @return
     */
    public HashMap<String, String> getStatusListDocument(ComplexControleurEnvoiDetail controleurEnvoi) {
        HashMap<String, String> aReturn = new HashMap<String, String>();

        for (int iIndexCS = 0; iIndexCS < IAMCodeSysteme.AMDocumentStatus.values().length; iIndexCS++) {
            String key = IAMCodeSysteme.AMDocumentStatus.values()[iIndexCS].getValue();
            String value = getSession().getCodeLibelle(key);
            aReturn.put(key, value);
            if (controleurEnvoi.getTypeJob().equals(IAMCodeSysteme.AMJobType.JOBMANUALEDITED.getValue())) {
                aReturn.remove(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue());
            } else {
                aReturn.remove(IAMCodeSysteme.AMDocumentStatus.MANUALGENERATED.getValue());
            }
            aReturn.remove(IAMCodeSysteme.AMDocumentStatus.INPROGRESS.getValue());
            aReturn.remove(IAMCodeSysteme.AMDocumentStatus.ERROR.getValue());
        }

        return aReturn;
    }

    /**
     * Retourne la liste à afficher dans la combobox de sélection de status pour un job
     * 
     * HashMap<value, libelle>
     * 
     * @param jobId
     * @param searchedJob
     * @return
     */
    public HashMap<String, String> getStatusListJob(String jobId, ComplexControleurEnvoiDetailSearch searchedJob) {
        HashMap<String, String> aReturn = new HashMap<String, String>();

        // Parcours du job pour déterminé si process/manuel/auto
        for (int iIndex = 0; iIndex < searchedJob.getSize(); iIndex++) {
            ComplexControleurEnvoiDetail controleurEnvoi = (ComplexControleurEnvoiDetail) searchedJob
                    .getSearchResults()[iIndex];
            if (controleurEnvoi.getIdJob().equals(jobId)) {
                // Get the code system and fill the hashmap
                for (int iIndexCS = 0; iIndexCS < IAMCodeSysteme.AMDocumentStatus.values().length; iIndexCS++) {
                    String key = IAMCodeSysteme.AMDocumentStatus.values()[iIndexCS].getValue();
                    String value = getSession().getCodeLibelle(key);
                    aReturn.put(key, value);
                    if (controleurEnvoi.getTypeJob().equals(IAMCodeSysteme.AMJobType.JOBMANUALEDITED.getValue())) {
                        aReturn.remove(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue());
                    } else {
                        aReturn.remove(IAMCodeSysteme.AMDocumentStatus.MANUALGENERATED.getValue());
                    }
                    aReturn.remove(IAMCodeSysteme.AMDocumentStatus.INPROGRESS.getValue());
                    aReturn.remove(IAMCodeSysteme.AMDocumentStatus.ERROR.getValue());
                }
                break;
            }
        }

        return aReturn;
    }

    /**
     * Retourne la liste à afficher dans la combobox de sélection de status pour un job
     * 
     * HashMap<value, libelle>
     * 
     * @param jobId
     * @param searchedJob
     * @return
     */
    public HashMap<String, String> getStatusListJob(String jobId, ComplexControleurEnvoiSearch searchedJob) {
        HashMap<String, String> aReturn = new HashMap<String, String>();

        // Parcours du job pour déterminé si process/manuel/auto
        for (int iIndex = 0; iIndex < searchedJob.getSize(); iIndex++) {
            ComplexControleurEnvoi controleurEnvoi = (ComplexControleurEnvoi) searchedJob.getSearchResults()[iIndex];
            if (controleurEnvoi.getIdJob().equals(jobId)) {
                // Get the code system and fill the hashmap
                for (int iIndexCS = 0; iIndexCS < IAMCodeSysteme.AMDocumentStatus.values().length; iIndexCS++) {
                    String key = IAMCodeSysteme.AMDocumentStatus.values()[iIndexCS].getValue();
                    String value = getSession().getCodeLibelle(key);
                    aReturn.put(key, value);
                    if (controleurEnvoi.getTypeJob().equals(IAMCodeSysteme.AMJobType.JOBMANUALEDITED.getValue())) {
                        aReturn.remove(IAMCodeSysteme.AMDocumentStatus.AUTOGENERATED.getValue());
                    } else {
                        aReturn.remove(IAMCodeSysteme.AMDocumentStatus.MANUALGENERATED.getValue());
                    }
                    aReturn.remove(IAMCodeSysteme.AMDocumentStatus.INPROGRESS.getValue());
                    aReturn.remove(IAMCodeSysteme.AMDocumentStatus.ERROR.getValue());
                }
                break;
            }
        }

        return aReturn;
    }

    /**
     * Change the status of the selected items or job
     * 
     * @throws Exception
     */
    public void launchPrintProcess() throws Exception {

        // -----------------------------------
        // INPUT VALUES
        // -----------------------------------
        ArrayList<String> allIds = null;
        String idJobForProcess = null;
        if ((selectedStatus != null) && (selectedStatus.length() > 0)) {
            allIds = new ArrayList<String>();
            String[] itemsToChange = selectedStatus.split(",");
            for (int iItem = 0; iItem < itemsToChange.length; iItem++) {
                String currentStatus = itemsToChange[iItem];
                allIds.add(currentStatus);
            }
        } else if ((selectedJob != null) && (selectedJob.length() > 0)) {
            idJobForProcess = selectedJob;
        }

        // -----------------------------------
        // process preparation
        // -----------------------------------
        EnvoiFormuleProcess process = new EnvoiFormuleProcess();
        process.setIdItem(allIds);
        process.setIdJob(idJobForProcess);
        process.setChangeStatusOnly(false);
        process.setSession(BSessionUtil.getSessionFromThreadContext());

        String savedStatus = null;

        try {
            // AVANT TRAITEMENT METTRE LE STATUS A IN PROGRESS (ITEM VS JOB)
            // -----------------------------------
            savedStatus = setPrintStatusInProgress(allIds, idJobForProcess);
            // Launch the process
            // -----------------------------------
            BProcessLauncher.start(process, false);
        } catch (Exception e) {
            JadeLogger.error(this, "Error Launching Process processEnvoiStatus : " + e.getMessage());
            restorePrintStatusSavedProgress(allIds, idJobForProcess, savedStatus);
        }

    }

    /**
     * Si échec au démarrage du process, restore de l'ancienne valeur du status
     * 
     * @param allIds
     * @param idJobForProcess
     * @param savedStatus
     */
    private void restorePrintStatusSavedProgress(ArrayList<String> allIds, String idJobForProcess, String savedStatus) {
        // RESTORE ANCIEN STATUS EN CAS DE MMMM
        // -----------------------------------
        if (idJobForProcess != null) {
            try {
                SimpleControleurJob job = AmalImplServiceLocator.getSimpleControleurJobService().read(idJobForProcess);
                job.setStatusEnvoi(savedStatus);
                job = AmalImplServiceLocator.getSimpleControleurJobService().update(job);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                for (int iDetail = 0; iDetail < allIds.size(); iDetail++) {
                    AmalImplServiceLocator.getSimpleControleurEnvoiStatusService().changeStatus(allIds.get(iDetail),
                            savedStatus, true, null);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Override
    public void retrieve() throws Exception {
    }

    public void retrieveNotSent() throws Exception {

        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  Retrieve NOT SENT");

        // cherche les jobs de type process
        // renseigne les ComplexControleurEnvoi objects
        jobSearchedProcess = new SimpleControleurJobSearch();
        jobSearchedProcess.setForTypeJob(IAMCodeSysteme.AMJobType.JOBPROCESS.getValue());
        jobSearchedProcess.setForNotStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.SENT.getValue());
        jobSearchedProcess = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearchedProcess);
        jobProcessGenerated = new ComplexControleurEnvoiSearch[jobSearchedProcess.getSize()];
        for (int iJob = 0; iJob < jobSearchedProcess.getSize(); iJob++) {
            SimpleControleurJob result = (SimpleControleurJob) jobSearchedProcess.getSearchResults()[iJob];

            // Pour alléger l'interface graphique et le temps de réaction
            // Création d'un fake pour les travaux de type process
            ComplexControleurEnvoi myProcess = new ComplexControleurEnvoi();
            myProcess.setDateJob(result.getDateJob());
            myProcess.setDescriptionJob(result.getDescriptionJob());
            myProcess.setId(result.getIdJob());
            // myProcess.setNew(false);
            myProcess.setStatusEnvoi(result.getStatusEnvoi());
            myProcess.setTypeJob(result.getTypeJob());

            jobProcessGenerated[iJob] = new ComplexControleurEnvoiSearch();
            jobProcessGenerated[iJob].setSearchResults(new JadeAbstractModel[] { myProcess });

        }

        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  Retrieve les jobs auto generated");

        // cherche les jobs de type auto generated
        // renseigne les ComplexControleurEnvoiDetail objects
        jobSearchedAuto = new SimpleControleurJobSearch();
        jobSearchedAuto.setForTypeJob(IAMCodeSysteme.AMJobType.JOBMANUALQUEUED.getValue());
        jobSearchedAuto.setForNotStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.SENT.getValue());
        jobSearchedAuto = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearchedAuto);

        jobAutoGenerated = new ComplexControleurEnvoiDetailSearch[jobSearchedAuto.getSize()];
        for (int iJob = 0; iJob < jobSearchedAuto.getSize(); iJob++) {
            /*
             * SimpleControleurJob result = (SimpleControleurJob) this.jobSearchedAuto.getSearchResults()[iJob];
             * this.jobAutoGenerated[iJob] = new ComplexControleurEnvoiDetailSearch();
             * this.jobAutoGenerated[iJob].setForIdJob(result.getIdJob()); this.jobAutoGenerated[iJob] =
             * AmalServiceLocator.getControleurEnvoiService().search( this.jobAutoGenerated[iJob]);
             */

            // essai de rapidité...
            // Renseigner un ComplexControleurEnvoiDetail pour les résultats

            SimpleControleurJob currentJob = (SimpleControleurJob) jobSearchedAuto.getSearchResults()[iJob];
            SimpleControleurEnvoiStatusSearch currentStatusSearch = new SimpleControleurEnvoiStatusSearch();
            currentStatusSearch.setForIdJob(currentJob.getId());
            currentStatusSearch = AmalImplServiceLocator.getSimpleControleurEnvoiStatusService().search(
                    currentStatusSearch);

            // Tableau de résultats
            JadeAbstractModel[] searchResults = new JadeAbstractModel[currentStatusSearch.getSize()];
            for (int iStatus = 0; iStatus < currentStatusSearch.getSize(); iStatus++) {
                SimpleControleurEnvoiStatus currentStatus = (SimpleControleurEnvoiStatus) currentStatusSearch
                        .getSearchResults()[iStatus];
                ComplexControleurEnvoiDetail detail = new ComplexControleurEnvoiDetail();

                // job detail
                detail.setDateJob(currentJob.getDateJob());
                detail.setDescriptionJob(currentJob.getDescriptionJob());
                detail.setIdJob(currentJob.getIdJob());
                detail.setTypeJob(currentJob.getTypeJob());
                // status detail
                detail.setIdStatus(currentStatus.getIdStatus());
                detail.setStatusEnvoi(currentStatus.getStatusEnvoi());
                detail.setJobError(!JadeStringUtil.isEmpty(currentStatus.getJobError()) ? currentStatus.getJobError()
                        : "");
                // document detail
                try {
                    if (currentStatus.getTypeEnvoi().equals(IAMCodeSysteme.AMDocumentType.ENVOI.getValue())) {
                        SimpleDocument currentDocument = AmalImplServiceLocator.getSimpleDocumentService().read(
                                currentStatus.getIdEnvoi());
                        if (currentDocument != null) {
                            detail.setDateEnvoi(currentDocument.getDateEnvoi());
                            detail.setLibelleEnvoi(currentDocument.getLibelleEnvoi());
                            detail.setNumModele(currentDocument.getNumModele());
                            detail.setIdDetailFamille(currentDocument.getIdDetailFamille());
                            SimpleDetailFamille currentDetailFamille = AmalImplServiceLocator
                                    .getSimpleDetailFamilleService().read(currentDocument.getIdDetailFamille());
                            if (currentDetailFamille != null) {
                                SimpleFamille currentFamille = AmalImplServiceLocator.getSimpleFamilleService().read(
                                        currentDetailFamille.getIdFamille());
                                if (currentFamille != null) {
                                    detail.setNomPrenom(currentFamille.getNomPrenom());
                                }
                            }
                        }
                    } else {
                        // on verra plus tard, les annonces ne sont que des process...
                    }
                } catch (Exception ex) {
                    JadeLogger.error(this, "Error retrieving job information : " + ex.toString());
                }
                searchResults[iStatus] = detail;
            }
            ComplexControleurEnvoiDetailSearch currentSearch = new ComplexControleurEnvoiDetailSearch();
            currentSearch.setSearchResults(searchResults);
            jobAutoGenerated[iJob] = currentSearch;

        }

        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  Retrieve les jobs manually generated");

        // cherche les jobs de type manual generated
        // renseigne les ComplexControleurEnvoiDetail objects
        jobSearchedManual = new SimpleControleurJobSearch();
        jobSearchedManual.setForTypeJob(IAMCodeSysteme.AMJobType.JOBMANUALEDITED.getValue());
        jobSearchedManual.setForNotStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.SENT.getValue());
        jobSearchedManual = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearchedManual);
        jobManualGenerated = new ComplexControleurEnvoiDetailSearch[jobSearchedManual.getSize()];
        for (int iJob = 0; iJob < jobSearchedManual.getSize(); iJob++) {
            /*
             * SimpleControleurJob result = (SimpleControleurJob) this.jobSearchedManual.getSearchResults()[iJob];
             * 
             * this.jobManualGenerated[iJob] = new ComplexControleurEnvoiDetailSearch();
             * this.jobManualGenerated[iJob].setForIdJob(result.getIdJob()); this.jobManualGenerated[iJob] =
             * AmalServiceLocator.getControleurEnvoiService().search( this.jobManualGenerated[iJob]);
             * 
             * SimpleControleurJob currentJob = (SimpleControleurJob) this.jobSearchedAuto.getSearchResults()[iJob];
             * SimpleControleurEnvoiStatusSearch currentStatusSearch = new SimpleControleurEnvoiStatusSearch();
             * currentStatusSearch.setForIdJob(currentJob.getId()); currentStatusSearch =
             * AmalImplServiceLocator.getSimpleControleurEnvoiStatusService().search( currentStatusSearch);
             */

            SimpleControleurJob currentJob = (SimpleControleurJob) jobSearchedManual.getSearchResults()[iJob];
            SimpleControleurEnvoiStatusSearch currentStatusSearch = new SimpleControleurEnvoiStatusSearch();
            currentStatusSearch.setForIdJob(currentJob.getId());
            currentStatusSearch = AmalImplServiceLocator.getSimpleControleurEnvoiStatusService().search(
                    currentStatusSearch);

            // Tableau de résultats
            JadeAbstractModel[] searchResults = new JadeAbstractModel[currentStatusSearch.getSize()];
            for (int iStatus = 0; iStatus < currentStatusSearch.getSize(); iStatus++) {
                SimpleControleurEnvoiStatus currentStatus = (SimpleControleurEnvoiStatus) currentStatusSearch
                        .getSearchResults()[iStatus];
                ComplexControleurEnvoiDetail detail = new ComplexControleurEnvoiDetail();

                // job detail
                detail.setDateJob(currentJob.getDateJob());
                detail.setDescriptionJob(currentJob.getDescriptionJob());
                detail.setIdJob(currentJob.getIdJob());
                detail.setTypeJob(currentJob.getTypeJob());
                // status detail
                detail.setIdStatus(currentStatus.getIdStatus());
                detail.setStatusEnvoi(currentStatus.getStatusEnvoi());
                // document detail
                try {
                    if (currentStatus.getTypeEnvoi().equals(IAMCodeSysteme.AMDocumentType.ENVOI.getValue())) {
                        SimpleDocument currentDocument = AmalImplServiceLocator.getSimpleDocumentService().read(
                                currentStatus.getIdEnvoi());
                        if (currentDocument != null) {
                            detail.setDateEnvoi(currentDocument.getDateEnvoi());
                            detail.setLibelleEnvoi(currentDocument.getLibelleEnvoi());
                            detail.setNumModele(currentDocument.getNumModele());
                            detail.setIdDetailFamille(currentDocument.getIdDetailFamille());
                            SimpleDetailFamille currentDetailFamille = AmalImplServiceLocator
                                    .getSimpleDetailFamilleService().read(currentDocument.getIdDetailFamille());
                            if (currentDetailFamille != null) {
                                SimpleFamille currentFamille = AmalImplServiceLocator.getSimpleFamilleService().read(
                                        currentDetailFamille.getIdFamille());
                                if (currentFamille != null) {
                                    detail.setNomPrenom(currentFamille.getNomPrenom());
                                }
                            }
                        }
                    } else {
                        // on verra plus tard, les annonces ne sont que des process...
                    }
                } catch (Exception ex) {
                    JadeLogger.error(this, "Error retrieving job information : " + ex.toString());
                }
                searchResults[iStatus] = detail;
            }
            ComplexControleurEnvoiDetailSearch currentSearch = new ComplexControleurEnvoiDetailSearch();
            currentSearch.setSearchResults(searchResults);
            jobManualGenerated[iJob] = currentSearch;
        }

        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  FIN Retrieve NOT SENT");

    }

    public void retrieveSent() throws Exception {
        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  Retrieve SENT");
        retrieveSentQueue();
        retrieveSentWord();
        retrieveSentProcess();
        JadeLogger.info(this, ">>>>>>>>>>>>>>>>  Retrieve SENT END");
    }

    public void retrieveSentProcess() throws Exception {
        // cherche les jobs de type process
        // renseigne les ComplexControleurEnvoi objects
        jobSearchedProcess = new SimpleControleurJobSearch();
        jobSearchedProcess.setForTypeJob(IAMCodeSysteme.AMJobType.JOBPROCESS.getValue());
        jobSearchedProcess.setForStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.SENT.getValue());
        jobSearchedProcess = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearchedProcess);
        jobProcessGenerated = new ComplexControleurEnvoiSearch[jobSearchedProcess.getSize()];
        for (int iJob = 0; iJob < jobSearchedProcess.getSize(); iJob++) {
            SimpleControleurJob result = (SimpleControleurJob) jobSearchedProcess.getSearchResults()[iJob];

            // Pour alléger l'interface graphique et le temps de réaction
            // Création d'un fake
            ComplexControleurEnvoi myProcess = new ComplexControleurEnvoi();
            myProcess.setDateJob(result.getDateJob());
            myProcess.setDescriptionJob(result.getDescriptionJob());
            myProcess.setId(result.getIdJob());
            // myProcess.setNew(false);
            myProcess.setStatusEnvoi(result.getStatusEnvoi());
            myProcess.setTypeJob(result.getTypeJob());

            jobProcessGenerated[iJob] = new ComplexControleurEnvoiSearch();
            jobProcessGenerated[iJob].setSearchResults(new JadeAbstractModel[] { myProcess });

        }

    }

    public void retrieveSentQueue() throws Exception {
        // cherche les jobs de type auto generated
        // renseigne les ComplexControleurEnvoiDetail objects
        jobSearchedAuto = new SimpleControleurJobSearch();
        jobSearchedAuto.setForTypeJob(IAMCodeSysteme.AMJobType.JOBMANUALQUEUED.getValue());
        jobSearchedAuto.setForStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.SENT.getValue());
        jobSearchedAuto = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearchedAuto);

        jobAutoGenerated = new ComplexControleurEnvoiDetailSearch[jobSearchedAuto.getSize()];
        for (int iJob = 0; iJob < jobSearchedAuto.getSize(); iJob++) {
            SimpleControleurJob result = (SimpleControleurJob) jobSearchedAuto.getSearchResults()[iJob];
            // Création d'un fake pour les éléments envoyés

            ComplexControleurEnvoiDetail myProcess = new ComplexControleurEnvoiDetail();
            myProcess.setDateJob(result.getDateJob());
            myProcess.setDescriptionJob(result.getDescriptionJob());
            myProcess.setId(result.getIdJob());
            // myProcess.setNew(false);
            myProcess.setStatusEnvoi(result.getStatusEnvoi());
            myProcess.setTypeJob(result.getTypeJob());

            jobAutoGenerated[iJob] = new ComplexControleurEnvoiDetailSearch();
            jobAutoGenerated[iJob].setSearchResults(new JadeAbstractModel[] { myProcess });

        }
    }

    public void retrieveSentWord() throws Exception {
        // cherche les jobs de type manual generated
        // renseigne les ComplexControleurEnvoiDetail objects
        jobSearchedManual = new SimpleControleurJobSearch();
        jobSearchedManual.setForTypeJob(IAMCodeSysteme.AMJobType.JOBMANUALEDITED.getValue());
        jobSearchedManual.setForStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.SENT.getValue());
        jobSearchedManual = AmalImplServiceLocator.getSimpleControleurJobService().search(jobSearchedManual);

        jobManualGenerated = new ComplexControleurEnvoiDetailSearch[jobSearchedManual.getSize()];
        for (int iJob = 0; iJob < jobSearchedManual.getSize(); iJob++) {
            SimpleControleurJob result = (SimpleControleurJob) jobSearchedManual.getSearchResults()[iJob];
            // Création d'un fake pour éléments envoyés
            ComplexControleurEnvoiDetail myProcess = new ComplexControleurEnvoiDetail();
            myProcess.setDateJob(result.getDateJob());
            myProcess.setDescriptionJob(result.getDescriptionJob());
            myProcess.setId(result.getIdJob());
            // myProcess.setNew(false);
            myProcess.setStatusEnvoi(result.getStatusEnvoi());
            myProcess.setTypeJob(result.getTypeJob());

            jobManualGenerated[iJob] = new ComplexControleurEnvoiDetailSearch();
            jobManualGenerated[iJob].setSearchResults(new JadeAbstractModel[] { myProcess });
        }

    }

    /**
     * @param applyNewStatus
     *            the applyNewStatus to set
     */
    public void setApplyNewStatus(String applyNewStatus) {
        this.applyNewStatus = applyNewStatus;
    }

    /*
     * (non-Javadoc)
     * 
     * @see globaz.globall.db.BIPersistentObject#setId(java.lang.String)
     */
    @Override
    public void setId(String newId) {

    }

    /**
     * @param jobAutoGenerated
     *            the jobAutoGenerated to set
     */
    public void setJobAutoGenerated(ComplexControleurEnvoiDetailSearch[] jobAutoGenerated) {
        this.jobAutoGenerated = jobAutoGenerated;
    }

    /**
     * @param jobManualGenerated
     *            the jobManualGenerated to set
     */
    public void setJobManualGenerated(ComplexControleurEnvoiDetailSearch[] jobManualGenerated) {
        this.jobManualGenerated = jobManualGenerated;
    }

    /*
     * (non-Javadoc)
     * 
     * @see globaz.globall.db.BIPersistentObject#retrieve()
     */
    /**
     * @param jobProcessGenerated
     *            the jobProcessGenerated to set
     */
    public void setJobProcessGenerated(ComplexControleurEnvoiSearch[] jobProcessGenerated) {
        this.jobProcessGenerated = jobProcessGenerated;
    }

    /**
     * @param jobSearchedAuto
     *            the jobSearchedAuto to set
     */
    public void setJobSearchedAuto(SimpleControleurJobSearch jobSearchedAuto) {
        this.jobSearchedAuto = jobSearchedAuto;
    }

    /**
     * @param jobSearchedManual
     *            the jobSearchedManual to set
     */
    public void setJobSearchedManual(SimpleControleurJobSearch jobSearchedManual) {
        this.jobSearchedManual = jobSearchedManual;
    }

    /**
     * @param jobSearchedProcess
     *            the jobSearchedProcess to set
     */
    public void setJobSearchedProcess(SimpleControleurJobSearch jobSearchedProcess) {
        this.jobSearchedProcess = jobSearchedProcess;
    }

    /**
     * Avant traitement, application du status à in progress (refresh UI)
     * 
     * @param allIds
     * @param idJobForProcess
     * @return Ancienne valeur du status
     */
    private String setPrintStatusInProgress(ArrayList<String> allIds, String idJobForProcess) {
        String savedStatus = null;
        if (idJobForProcess != null) {
            try {
                SimpleControleurJob job = AmalImplServiceLocator.getSimpleControleurJobService().read(idJobForProcess);
                savedStatus = job.getStatusEnvoi();
                job.setStatusEnvoi(IAMCodeSysteme.AMDocumentStatus.INPROGRESS.getValue());
                job = AmalImplServiceLocator.getSimpleControleurJobService().update(job);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                for (int iDetail = 0; iDetail < allIds.size(); iDetail++) {
                    if (iDetail == 0) {
                        SimpleControleurEnvoiStatus envoiItem = AmalImplServiceLocator
                                .getSimpleControleurEnvoiStatusService().read(allIds.get(iDetail));
                        savedStatus = envoiItem.getStatusEnvoi();
                    }
                    AmalImplServiceLocator.getSimpleControleurEnvoiStatusService().changeStatus(allIds.get(iDetail),
                            IAMCodeSysteme.AMDocumentStatus.INPROGRESS.getValue(), true, null);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        return savedStatus;
    }

    /**
     * @param selectedJob
     *            the selectedJob to set
     */
    public void setSelectedJob(String selectedJob) {
        this.selectedJob = selectedJob;
    }

    /**
     * @param selectedStatus
     *            the selectedStatus to set
     */
    public void setSelectedStatus(String selectedStatus) {
        this.selectedStatus = selectedStatus;
    }

    /*
     * (non-Javadoc)
     * 
     * @see globaz.globall.db.BIPersistentObject#update()
     */
    @Override
    public void update() throws Exception {
        JadeLogger.info(this, "Penses à implémenter la mise à jour");
    }

}

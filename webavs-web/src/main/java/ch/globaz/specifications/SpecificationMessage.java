package ch.globaz.specifications;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Enumération contenant tous les messages relatifs aux spécifications.
 * 
 */
public enum SpecificationMessage {
    MESSAGE_QUALIFICATION_REQUIS("MESSAGE_QUALIFICATION_REQUIS"),
    PAS_DROIT_TRAITEMENT("PAS_DROIT_TRAITEMENT"),
    CM_PERIODE_POSTE_CM_INVALIDE("CM_PERIODE_POSTE_CM_INVALIDE"),
    IMPOT_SOURCE_ERREUR_TECHNIQUE("IMPOT_SOURCE_ERREUR_TECHNIQUE"),
    PROCESSUS_DEJA_LANCE("PROCESSUS_DEJA_LANCE"),
    PROCESSUS_AF_MANQUANT("PROCESSUS_AF_MANQUANT"),
    CAISSE_MALADIE_PERIODE_CHEVAUCHANTE("CAISSE_MALADIE_PERIODE_CHEVAUCHANTE"),
    LIBELLE_COTISATION_AP_MANQUANT("LIBELLE_COTISATION_AP_MANQUANT"),
    ASSOCIATION_PROFESSIONELLE_COTISATION_AP_MANQUANT("ASSOCIATION_PROFESSIONELLE_COTISATION_AP_MANQUANT"),
    COTISATION_AP_LIBELLE_MANQUANT("COTISATION_AP_LIBELLE_MANQUANT"),
    COTISATION_AP_MONTANT_MIN_MAX("COTISATION_AP_MONTANT_MIN_MAX"),
    MONTANT_COTISATION_AP_NEGATIF("MONTANT_COTISATION_AP_NEGATIF"),
    LIBELLE_COTISATION_AP_EXISTANT("LIBELLE_COTISATION_AP_EXISTANT"),
    PROBLEME_IMPRESSION_DECOMPTE_BVR_OU_VIDE("PROBLEME_IMPRESSION_DECOMPTE_BVR_OU_VIDE"),
    SAISIE_RAPIDE_PAS_DE_POSTE("SAISIE_RAPIDE_PAS_DE_POSTE"),
    PARAMETRE_COTISATION_AP_LIBELLE_MANQUANT("PARAMETRE_COTISATION_AP_LIBELLE_MANQUANT"),
    PARAMETRE_COTISATION_AP_GENRE_MANQUANT("PARAMETRE_COTISATION_AP_GENRE_MANQUANT"),
    PARAMETRE_COTISATION_AP_FOURCHETTE_MANQUANTE("PARAMETRE_COTISATION_AP_FOURCHETTE_MANQUANTE"),
    PARAMETRE_COTISATION_AP_FOURCHETTE_CHEVAUCHANTE("PARAMETRE_COTISATION_AP_FOURCHETTE_CHEVAUCHANTE"),
    PARAMETRE_COTISATION_AP_FOURCHETTE_INVALIDE("PARAMETRE_COTISATION_AP_FOURCHETTE_INVALIDE"),
    PARAMETRE_COTISATION_AP_LIBELLE_VIDE("PARAMETRE_COTISATION_AP_LIBELLE_VIDE"),
    PARAMETRE_COTISATION_AP_MONTANT_MANQUANT("PARAMETRE_COTISATION_AP_MONTANT_MANQUANT"),
    PARAMETRE_COTISATION_AP_TAUX_MANQUANT("PARAMETRE_COTISATION_AP_TAUX_MANQUANT"),
    AJ_PERIODE_NON_VIDE("AJ_PERIODE_NON_VIDE"),
    AJ_PERIODE_FIN_NON_SAISIE("AJ_PERIODE_FIN_NON_SAISIE"),
    AJ_PERIODE_DEBUT_PLUS_GRANDE_PERIODE_FIN("AJ_PERIODE_DEBUT_PLUS_GRANDE_PERIODE_FIN"),
    CP_ANNEE_DEBUT_NON_VIDE("CP_ANNEE_DEBUT_NON_VIDE"),
    CP_ANNEE_FIN_NON_VIDE("CP_ANNEE_FIN_NON_VIDE"),
    CP_ANNEE_FIN_PLUS_GRAND_ANNEE_DEBUT("CP_ANNEE_FIN_PLUS_GRAND_ANNEE_DEBUT"),
    CP_SALAIRE_NON_DECLARE_DATE_REQUISE("CP_SALAIRE_NON_DECLARE_DATE_REQUISE"),
    CP_DATE_SALAIRE_DECLARE_MONTANT_REQUIS("CP_DATE_SALAIRE_DECLARE_MONTANT_REQUIS"),
    CP_AUCUN_COMPTEUR("CP_AUCUN_COMPTEUR"),
    PRESTATION_PERIODE_NON_CONTENUE_POSTE("PRESTATION_PERIODE_NON_CONTENUE_POSTE"),
    CP_AUCUNE_CAISSE_METIER("CP_AUCUNE_CAISSE_METIER"),
    SM_PERIODE_NON_VIDE("SM_PERIODE_NON_VIDE"),
    SM_PERIODE_FIN_NON_SAISIE("SM_PERIODE_FIN_NON_SAISIE"),
    SM_PERIODE_DEBUT_PLUS_GRANDE_PERIODE_FIN("SM_PERIODE_DEBUT_PLUS_GRANDE_PERIODE_FIN"),
    SM_AUCUNE_CAISSE_METIER("SM_AUCUNE_CAISSE_METIER"),
    SM_NOMBRE_JOURS_MINIMUM("SM_NOMBRE_JOURS_MINIMUM"),
    SM_NOMBRE_JOURS_MAXIMUM("SM_NOMBRE_JOURS_MAXIMUM"),
    SM_VERSEMENT_APG_NON_SAISIE("SM_VERSEMENT_APG_NON_SAISIE"),
    DECOMPTE_DATE_DECOMPTE_REQUISE("DECOMPTE_DATE_DECOMPTE_REQUISE"),
    DECOMPTE_EMPLOYEUR_REQUIS("DECOMPTE_EMPLOYEUR_REQUIS"),
    DECOMPTE_MOTIF_PROLONGATION_REQUIS("DECOMPTE_MOTIF_PROLONGATION_REQUIS"),
    DECOMPTE_PERIODE_REQUISE("DECOMPTE_PERIODE_REQUISE"),
    DECOMPTE_NOMBRE_HEURES_POSITIF("DECOMPTE_NOMBRE_HEURES_POSITIF"),
    DECOMPTE_SALAIRE_NULL("DECOMPTE_SALAIRE_NULL"),
    DECOMPTE_SALAIRE_DEJA_EXISTANT_TRAVAILLEUR_MEME_PERIODE("DECOMPTE_SALAIRE_DEJA_EXISTANT_TRAVAILLEUR_MEME_PERIODE"),
    DECOMPTE_SALAIRE_PAS_MEME_ANNEE("DECOMPTE_SALAIRE_PAS_MEME_ANNEE"),
    PERIODE_INVALIDE("PERIODE_INVALIDE"),
    POSTE_TRAVAIL_ADHESION_PERIODE_VALIDE_REQUISE("POSTE_TRAVAIL_ADHESION_PERIODE_VALIDE_REQUISE"),
    POSTE_TRAVAIL_DATE_DEBUT_REQUISE("POSTE_TRAVAIL_DATE_DEBUT_REQUISE"),
    POSTE_TRAVAIL_DATE_DEBUT_COTISATION_APRES_DATE_DEBUT_POSTE(
            "POSTE_TRAVAIL_DATE_DEBUT_COTISATION_APRES_DATE_DEBUT_POSTE"),
    POSTE_TRAVAIL_DATE_DEBUT_COTISATION_AVANT_DATE_FIN_POSTE("POSTE_TRAVAIL_DATE_DEBUT_COTISATION_AVANT_DATE_FIN_POSTE"),
    POSTE_TRAVAIL_DATE_COTISATION_OBLIGATOIRE("POSTE_TRAVAIL_DATE_COTISATION_OBLIGATOIRE"),
    POSTE_TRAVAIL_DATE_FIN_COTISATION_AVANT_DATE_FIN_POSTE("POSTE_TRAVAIL_DATE_FIN_COTISATION_AVANT_DATE_FIN_POSTE"),
    POSTE_TRAVAIL_DATE_FIN_COTISATION_REQUISE("POSTE_TRAVAIL_DATE_FIN_COTISATION_REQUISE"),
    POSTE_TRAVAIL_DECOMPTE_SALAIRE_EXISTANT("POSTE_TRAVAIL_DECOMPTE_SALAIRE_EXISTANT"),
    POSTE_TRAVAIL_DECOMPTE_EXISTANT_HORS_NOUVELLE_PERIODE("POSTE_TRAVAIL_DECOMPTE_EXISTANT_HORS_NOUVELLE_PERIODE"),
    POSTE_TRAVAIL_EMPLOYEUR_REQUIS("POSTE_TRAVAIL_EMPLOYEUR_REQUIS"),
    POSTE_TRAVAIL_ETAT_POSTE_REQUIS("POSTE_TRAVAIL_ETAT_POSTE_REQUIS"),
    POSTE_TRAVAIL_MEME_OCCUPATIONS_DATE("POSTE_TRAVAIL_MEME_OCCUPATIONS_DATE"),
    POSTE_TRAVAIL_TRAVAILLEUR_EMPLOYEUR_CHEVAUCHE("POSTE_TRAVAIL_TRAVAILLEUR_EMPLOYEUR_CHEVAUCHE"),
    POSTE_TRAVAIL_TRAVAILLEUR_REQUIS("POSTE_TRAVAIL_TRAVAILLEUR_REQUIS"),
    POSTE_TRAVAIL_PERIODE_ACTIVITE_INVALIDE("POSTE_TRAVAIL_PERIODE_ACTIVITE_INVALIDE"),
    POSTE_TRAVAIL_QUALIFICATION_REQUISE("POSTE_TRAVAIL_QUALIFICATION_REQUISE"),
    POSTE_TRAVAIL_DATE_DEBUT_AFFILIATION_REQUISE("POSTE_TRAVAIL_DATE_DEBUT_AFFILIATION_REQUISE"),
    POSTE_TRAVAIL_DATE_DEBUT_PERIODE_ACTIVITE_APRES_DEBUT_AFFILIATION(
            "POSTE_TRAVAIL_DATE_DEBUT_PERIODE_ACTIVITE_APRES_DEBUT_AFFILIATION"),
    POSTE_TRAVAIL_DATE_DEBUT_PERIODE_ACTIVITE_AVANT_FIN_AFFILIATION(
            "POSTE_TRAVAIL_DATE_DEBUT_PERIODE_ACTIVITE_AVANT_FIN_AFFILIATION"),
    POSTE_TRAVAIL_DATE_FIN_PERIODE_ACTIVITE_AVANT_FIN_AFFILIATION(
            "POSTE_TRAVAIL_DATE_FIN_PERIODE_ACTIVITE_AVANT_FIN_AFFILIATION"),
    POSTE_TRAVAIL_PERIODE_ACTIVITE_NON_SAISIE_OCCUPATIONS("POSTE_TRAVAIL_PERIODE_ACTIVITE_NON_SAISIE_OCCUPATIONS"),
    POSTE_TRAVAIL_OCCUPATION_EN_DEHORS_PERIODE_ACTIVITE("POSTE_TRAVAIL_OCCUPATION_EN_DEHORS_PERIODE_ACTIVITE"),
    POSTE_TRAVAIL_ETAT_POSTE_TRAVAIL_REQUIS("POSTE_TRAVAIL_ETAT_POSTE_TRAVAIL_REQUIS"),
    POSTE_TRAVAIL_TYPE_SALAIRE_REQUIS("POSTE_TRAVAIL_TYPE_SALAIRE_REQUIS"),
    POSTE_TRAVAIL_ETAT_DEMISSION_INVALIDE("POSTE_TRAVAIL_ETAT_DEMISSION_INVALIDE"),
    DECOMPTE_SALAIRE_DEJA_EXISTANT_TRAVAILLEUR("DECOMPTE_SALAIRE_DEJA_EXISTANT_TRAVAILLEUR"),
    PRESTATIONS_LISTES_PERIODE_OU_LOT_REQUIS("PRESTATIONS_LISTES_PERIODE_OU_LOT_REQUIS"),
    PRESTATIONS_LISTES_PERIODE_OU_LOT("PRESTATIONS_LISTES_PERIODE_OU_LOT"),
    POSTE_TRAVAIL_COTISATIONS_CHEVAUCHANTES("POSTE_TRAVAIL_COTISATIONS_CHEVAUCHANTES"),
    PRESTATIONS_LISTES_PERIODE_FIN_PLUS_GRAND_DEBUT("PRESTATIONS_LISTES_PERIODE_FIN_PLUS_GRAND_DEBUT"),
    ENTREPRISES_LISTES_CONVENTION_REQUISE("ENTREPRISES_LISTES_CONVENTION_REQUISE"),
    ASSOCIATION_COTISATION_CHEVAUCHANTE("ASSOCIATION_COTISATION_CHEVAUCHANTE"),
    ASSOCIATION_PLUSIEURS_COTISATIONS_NM_ACTIVES("ASSOCIATION_PLUSIEURS_COTISATIONS_NM_ACTIVES"),
    ASSOCIATION_SOMME_MINIMUM_MASSE_SALARIALE_NON_ATTEINTE("ASSOCIATION_SOMME_MINIMUM_MASSE_SALARIALE_NON_ATTEINTE"),
    CM_PERIODE_INVALIDE("CM_PERIODE_INVALIDE"),
    CM_PERIODE_NON_SAISIE("CM_PERIODE_NON_SAISIE"),
    CM_CAISSE_MALADIE_NON_SELECTIONNEE("CM_CAISSE_MALADIE_NON_SELECTIONNEE"),
    PS_POURCENTAGE_NON_VALIDE("PS_POURCENTAGE_NON_VALIDE"),
    PS_MONTANT_PAR_TRAVAILLEUR_PRESENT("PS_MONTANT_PAR_TRAVAILLEUR_PRESENT"),
    PS_MONTANT_PAR_TRAVAILLEUR_NEGATIF("PS_MONTANT_PAR_TRAVAILLEUR_NEGATIF"),
    PS_DATE_DEBUT_NON_VALIDE("PS_DATE_DEBUT_NON_VALIDE"),
    PS_DATE_FIN_APRES_DATE_DEBUT("PS_DATE_FIN_APRES_DATE_DEBUT"),
    PS_CHEVAUCHEMENT_AUTRE_PARAMETRE_SYNDICAT("PS_CHEVAUCHEMENT_AUTRE_PARAMETRE_SYNDICAT"),
    BOUCLEMENT_CP_ANNEE_REQUISE("BOUCLEMENT_CP_ANNEE_REQUISE"),
    TI_CANTON_REQUIS("TI_CANTON_REQUIS"),
    TI_CHEVAUCHEMENT_PERIODES("TI_CHEVAUCHEMENT_PERIODES"),
    EMPLOYEUR_POSSEDE_TO_ACTIVE("EMPLOYEUR_POSSEDE_TO_ACTIVE"),
    DECOMPTE_CT_NUMERO_REQUIS("DECOMPTE_CT_NUMERO_REQUIS"),
    DECOMPTE_CT_MAUVAIS_CODE("DECOMPTE_CT_MAUVAIS_CODE"),
    PRESTATION_ASSURANCE_NON_ACTIVE("PRESTATION_ASSURANCE_NON_ACTIVE"),
    DECOMPTE_CT_ST_INTERETS_REQUIS("DECOMPTE_CT_ST_INTERETS_REQUIS"),
    DECOMPTE_SALAIRE_DATE_FIN_OBLIGATOIRE("DECOMPTE_SALAIRE_DATE_FIN_OBLIGATOIRE"),
    LPP_SANS_ADRESSE_DOMICILE("LPP_SANS_ADRESSE_DOMICILE");

    private String message;

    private static final String SPECIFICATIONS_BUNDLE_NAME = "ch.globaz.specifications.Specifications";

    public static String getMessage(Locale locale, SpecificationMessage specificationMessage) {
        return getMessage(locale, specificationMessage, new ArrayList<String>());
    }

    public static String getMessage(Locale locale, SpecificationMessage specificationMessage, List<String> parameters) {
        return getMessage(locale, specificationMessage.getMessage(), parameters);
    }

    public static String getMessage(Locale locale, SpecificationMessage specificationMessage, String... parameters) {
        return getMessage(locale, specificationMessage.getMessage(), Arrays.asList(parameters));
    }

    public static String getMessage(Locale locale, String label, List<String> parameters) {
        ResourceBundle bundle = ResourceBundle.getBundle(SPECIFICATIONS_BUNDLE_NAME, locale);
        String message = bundle.getString(label);

        return findAndReplaceParameters(message, parameters);
    }

    private static String findAndReplaceParameters(String message, List<String> parametres) {
        Pattern patt = Pattern.compile("\\{\\}");
        Matcher m = patt.matcher(message);
        StringBuffer sb = new StringBuffer(message.length());
        int cpt = 0;
        int sizeParametres = parametres.size();
        while (m.find()) {
            // Si on a pas assez de paramètres, on sort de la boucle
            if (cpt == sizeParametres) {
                break;
            }
            m.appendReplacement(sb, parametres.get(cpt));
            cpt++;
        }
        m.appendTail(sb);
        return sb.toString();
    }

    private SpecificationMessage(String message) {
        this.message = message;
    }

    /**
     * Retourne le message de la spécification (label) à rechercher dans le bundle.
     * 
     * @return String représentant le message
     */
    public String getMessage() {
        return message;
    }
}

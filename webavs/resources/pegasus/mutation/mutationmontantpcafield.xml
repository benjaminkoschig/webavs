<?xml version="1.0" encoding="iso-8859-1"?>
<model-mapping>
	<complexe-model className="ch.globaz.pegasus.business.models.mutation.MutationMontantPCAFileds">
	
		<root-model name="simpleDecisionHeader" model-ref="ch.globaz.pegasus.business.models.decision.SimpleDecisionHeader" select-fields="false" />
		<!--On met le distinct pour les couples à domicile avec 2 rentes principal (DOM2R)-->
		<select-fields distinct="true">
			<select-field name="idVersionDroit" field-ref="pcaCourant.idVersionDroit" />
			<select-field name="idPcaActuel" field-ref="pcaCourant.idPCAccordee" />
			<select-field name="csTypePreparationDecision" field-ref="simpleDecisionApresCalcul.csTypePreparation" />
			<select-field name="typePcActuel" field-ref="pcaCourant.csTypePC" />
			<select-field name="typePcPrecedant" field-ref="pcaPrecedante.csTypePC" />
			<select-field name="typeDecision" field-ref="simpleDecisionHeader.csTypeDecision" />
			<select-field name="nss"    field-ref="personneEtendueComplexModel.personneEtendue.numAvsActuel" />
			<select-field name="nom"    field-ref="personneEtendueComplexModel.tiers.designation1" />
			<select-field name="prenom" field-ref="personneEtendueComplexModel.tiers.designation2" />
			<select-field name="ancienMontant" field-ref="planClaculePrecedant.montantPCMensuelle" />
			<select-field name="montantActuel" field-ref="planClaculeCourant.montantPCMensuelle" />
			<select-field name="dateDebutPcaActuel" field-ref="pcaCourant.dateDebut" />
			<select-field name="dateFinPcaActuel" field-ref="pcaCourant.dateFin" />
			<select-field name="dateDebutPcaPrecedant" field-ref="pcaPrecedante.dateDebut" />
			<select-field name="dateFinPcaPrecedant" field-ref="pcaPrecedante.dateFin" />
			<select-field name="noVersion" field-ref="droitCourant.noVersion" />
			<select-field name="csMotif" field-ref="droitCourant.csMotif" />
			<select-field name="idTiersActuel" field-ref="simplePrestationsAccordees.idTiersBeneficiaire" />
			<select-field name="idTiersPrecedant" field-ref="prestationsAccordeesPrecedante.idTiersBeneficiaire" />
		</select-fields> 			

	    <linked-model name="simpleValidationDecision" model-ref="ch.globaz.pegasus.business.models.decision.SimpleValidationDecision" join-type="LEFT_OUTER" select-fields="false" >
			<join-group operator="AND">
				<join-field name="idDecisionHeader" operation="EQUALS" field-ref="simpleDecisionHeader.idDecisionHeader"/>
			</join-group>		
		</linked-model>
	    
	    		<!-- On fait left outer pour retrouver les décisions sans calcules-->
		<linked-model name="simpleDecisionApresCalcul" model-ref="ch.globaz.pegasus.business.models.decision.SimpleDecisionApresCalcul" join-type="LEFT_OUTER" select-fields="false">
			<join-group operator="AND">
				<join-field name="idDecisionHeader" operation="EQUALS" field-ref="simpleDecisionHeader.idDecisionHeader"/>
			</join-group>
		</linked-model>
	    
	    
	    <linked-model name="pcaCourant" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee" join-type="INNER" select-fields="false" >
			<join-group operator="AND">
				<join-field name="idPCAccordee" operation="EQUALS" field-ref="simpleValidationDecision.idPCAccordee"/>
			</join-group>		
		</linked-model>
	    
	    <linked-model name="simplePrestationsAccordees" model-ref="ch.globaz.corvus.business.models.rentesaccordees.SimplePrestationsAccordees" join-type="LEFT_OUTER" select-fields="false">
			<join-group operator="AND">
				<join-field name="idPrestationAccordee" operation="EQUALS" field-ref="pcaCourant.idPrestationAccordee"/>
			</join-group>
		</linked-model>
		
	    <linked-model name="personneEtendueComplexModel" model-ref="ch.globaz.pyxis.business.model.PersonneEtendueComplexModel" join-type="INNER" select-fields="false" >
			<join-group operator="AND">
				<join-field name="personneEtendue.idTiers" operation="EQUALS" field-ref="simplePrestationsAccordees.idTiersBeneficiaire"/>
			</join-group>		
		</linked-model>
	    
	    <linked-model name="planClaculeCourant" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePlanDeCalcul" join-type="LEFT_OUTER" select-fields="false" >
			<join-group operator="AND">
				<join-field name="idPCAccordee" operation="EQUALS" field-ref="pcaCourant.idPCAccordee"/>
			</join-group>		
		</linked-model>
	    
	    <linked-model name="droitCourant" model-ref="ch.globaz.pegasus.business.models.droit.SimpleVersionDroit" join-type="INNER" select-fields="false" >
			<join-group operator="AND">
				<join-field name="idVersionDroit" operation="EQUALS" field-ref="pcaCourant.idVersionDroit"/>
			</join-group>		
		</linked-model>
	
		<linked-model name="droitPrcedant" model-ref="ch.globaz.pegasus.business.models.droit.SimpleVersionDroit" join-type="INNER" select-fields="false" >
			<join-group operator="AND">
				<join-field name="idDroit" operation="EQUALS" field-ref="droitCourant.idDroit"/>
			</join-group>		
		</linked-model>
		
		<linked-model name="pcaPrecedante" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee" join-type="INNER" select-fields="false" >
			<join-group operator="AND">
				<join-field name="idVersionDroit" operation="EQUALS" field-ref="droitPrcedant.idVersionDroit"/>
			</join-group>		
		</linked-model>
		
	    <linked-model name="planClaculePrecedant" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePlanDeCalcul" join-type="INNER"  select-fields="false" >
			<join-group operator="AND">
				<join-field name="idPCAccordee" operation="EQUALS" field-ref="pcaPrecedante.idPCAccordee"/>
			</join-group>		
		</linked-model>
		
		 <linked-model name="prestationsAccordeesPrecedante" model-ref="ch.globaz.corvus.business.models.rentesaccordees.SimplePrestationsAccordees" join-type="INNER"  select-fields="false" >
			<join-group operator="AND">
				<join-field name="idPrestationAccordee" operation="EQUALS" field-ref="pcaPrecedante.idPrestationAccordee"/>
			</join-group>		
		</linked-model>
		
	   	<search-definition>
			<search-group operator="AND">
				<search-literal>
					<declare-model name="pca" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee"/>
					<![CDATA[ 
						(1 = (select count (*) 
					  		    from @{pca} 
					  		   where #{pca.dateDebut}  = #{pcaPrecedante.dateDebut} 
					  		     and #{pca.idVersionDroit}  = #{pcaPrecedante.idVersionDroit} 
					  		     and #{pca.dateFin} = #{pcaPrecedante.dateFin} 
					  		)
					  	
					  		or (
					  			#{simplePrestationsAccordees.idTiersBeneficiaire} = #{prestationsAccordeesPrecedante.idTiersBeneficiaire} 
					  			and  1 < (select count (*) 
								  		    from @{pca} 
								  		   where #{pca.dateDebut}  = #{pcaPrecedante.dateDebut} 
								  		     and #{pca.idVersionDroit}  = #{pcaPrecedante.idVersionDroit} 
								  		     and #{pca.dateFin} = #{pcaPrecedante.dateFin} 
					  					)
					  		)
					  	)
					]]>
				</search-literal>
				<search-field name="forIsSupprime" operation="EQUALS" field-ref="pcaCourant.isSupprime" />	
				<search-field name="forIsSupprime" operation="EQUALS" field-ref="pcaPrecedante.isSupprime" />	
				
				<search-group operator="OR">
					<search-field name="inEtatDroitPrecedant" operation="IN" field-ref="droitPrcedant.csEtatDroit" /><!-- historisé -->
					<search-group operator="AND">
						<search-field name="inEtatDroitCourant" operation="IN" field-ref="droitPrcedant.csEtatDroit" />	<!-- Octroy(valide) pi Courant validé -->
					 	<search-field name="forIdPcaParent" operation="EQUALS" field-ref="droitCourant.noVersion" value="1" /> <!-- Octroy(valide) pi Courant validé -->
						<search-literal>
							<![CDATA[#{pcaPrecedante.idPCAccordee} = #{pcaCourant.idPCAccordee} ]]>
						</search-literal>
					</search-group>
				</search-group>

				<search-field name="forIsPlanRetenu" operation="EQUALS" field-ref="planClaculePrecedant.isPlanRetenu"/>
		
				<!-- <search-field name="forIdPcaParent" operation="NULL" field-ref="pcaPrecedante.idPcaParent"/> -->
				
				<search-field name="forDateDecisionMin" operation="GREATER_OR_EQUALS" field-ref="simpleDecisionHeader.dateDecision"/>
				<search-group operator="OR"> 
					<search-field name="forDateDecisionMax" operation="LESS_OR_EQUALS"  field-ref="simpleDecisionHeader.dateDecision"/>
				</search-group>
				
				<search-field name="forCsEtat" operation="EQUALS" field-ref="simpleDecisionHeader.csEtatDecision" value="64028003" />

				<search-group operator="OR">
					<search-group operator="AND">	
							
						<search-literal>
							<declare-model name="versionDroitMax" model-ref="ch.globaz.pegasus.business.models.droit.SimpleVersionDroit"/>
							<declare-model name="pcaPrecedanteMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee"/>
							<declare-model name="planClaculePrecedantMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePlanDeCalcul"/>
							<![CDATA[ 
								((#{droitPrcedant.noVersion} = (select max(#{versionDroitMax.noVersion} ) 
																from @{versionDroitMax} 
															   inner join @{pcaPrecedanteMax} 
																  on ( #{versionDroitMax.idVersionDroit} = #{pcaPrecedanteMax.idVersionDroit} )
															   inner join  @{planClaculePrecedantMax}
																  on (#{pcaPrecedanteMax.idPCAccordee}= #{planClaculePrecedantMax.idPCAccordee} ) 
															   where #{versionDroitMax.idDroit} = #{droitPrcedant.idDroit}
															   	  and ( #{versionDroitMax.noVersion} < #{droitCourant.noVersion} or  #{droitCourant.noVersion} = 1)
																  and ( #{versionDroitMax.csEtatDroit} IN ( 64003005 )
																		or ( #{versionDroitMax.csEtatDroit} IN ( 64003006, 64003004, 64003005 )
																			and #{droitCourant.noVersion} = 1
																		)
																	  )
																  and ( #{pcaPrecedanteMax.dateFin} = #{pcaCourant.dateFin}
																	  or ( (
																		( #{pcaPrecedanteMax.dateFin}  is null or #{pcaPrecedanteMax.dateFin}  = 0)
																			or (
																				#{pcaPrecedanteMax.dateFin} >= #{pcaCourant.dateDebut}
																				and #{pcaCourant.dateFin}  <= #{pcaPrecedanteMax.dateFin}
																				and ( #{pcaCourant.dateFin} is not null AND #{pcaCourant.dateFin} <> 0  )
																			 )
																		)
																		   AND ( #{pcaPrecedanteMax.dateFin} <= #{pcaCourant.dateDebut}  ) )
																	  )
																  ) 
									or (#{droitCourant.noVersion} = 1 
										and #{droitPrcedant.noVersion} = 1 
									)
								  )
								  and ( #{pcaPrecedante.dateFin} = #{pcaCourant.dateFin} 
									  or ((#{pcaPrecedante.dateFin}  is null 
										   or #{pcaPrecedante.dateFin} = 0 
											or (#{pcaPrecedante.dateFin} >= #{pcaCourant.dateDebut}
												and #{pcaCourant.dateFin}<= #{pcaPrecedante.dateFin} 
												and  (#{pcaCourant.dateFin} <> 0 and #{pcaCourant.dateFin} is not null)
											)
										   )
											and (#{pcaPrecedante.dateDebut} <= #{pcaCourant.dateDebut} )
									  )
								  )
								  and (#{pcaCourant.dateDebut} <= #{pcaCourant.dateFin} 
									or (#{pcaCourant.dateFin} = 0 or #{pcaCourant.dateFin} is null)
								  )
								  and (#{pcaPrecedante.idPCAccordee} <> #{pcaCourant.idPCAccordee}  or 
										 #{droitPrcedant.noVersion} = 1  and #{pcaPrecedante.idPCAccordee} = #{pcaCourant.idPCAccordee}
									  )
								  and #{droitCourant.noVersion} <> #{droitPrcedant.noVersion}
								  or (#{droitCourant.noVersion} = 1 
									and #{droitPrcedant.noVersion} = 1  
									and #{pcaPrecedante.idPCAccordee} = #{pcaCourant.idPCAccordee}
								  )
								)
							 ]]>
						</search-literal>
					
						<search-field name="forIsPlanRetenu" operation="EQUALS" field-ref="planClaculeCourant.isPlanRetenu"/>		
						<search-field name="inTypeDecision" operation="IN" field-ref="simpleDecisionHeader.csTypeDecision" value="64042006, 64042003, 64042005, 64042004" /> <!--CS_TYPE_ADAPTATION_AC, CS_TYPE_OCTROI_AC, CS_TYPE_PARTIEL_AC, CS_TYPE_REFUS_AC, CS_TYPE_REFUS_AC -->
					<!-- <search-field name="forIdPcaParent" operation="NULL" field-ref="pcaCourant.idPcaParent"/> -->
					</search-group>
					<!-- Pour les décisions de supression -->
					<search-group operator="AND">
						<search-field name="inTypeDecision" operation="IN" field-ref="simpleDecisionHeader.csTypeDecision" value="64042002" /> <!--CS_TYPE_SUPPRESSION_SC-->
						<search-field name="forDateDecisionMax" operation="NULL"  field-ref="pcaPrecedante.dateFin"/>
					<!-- <search-field name="forIdPcaParent" operation="NULL" field-ref="pcaPrecedante.idPcaParent"/>	-->					
						<search-literal>
							<declare-model name="versionDroitMax" model-ref="ch.globaz.pegasus.business.models.droit.SimpleVersionDroit"/>
							<declare-model name="pcaPrecedanteMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee"/>
							<declare-model name="planClaculePrecedantMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePlanDeCalcul"/>
							<![CDATA[ 
									#{pcaCourant.isSupprime} = 2 and
								    #{droitPrcedant.noVersion} = (select max(#{versionDroitMax.noVersion} ) 
																	from @{versionDroitMax} 
																   inner join @{pcaPrecedanteMax} 
																      on #{versionDroitMax.idVersionDroit} = #{pcaPrecedanteMax.idVersionDroit} 
																   inner join  @{planClaculePrecedantMax}
																      on #{pcaPrecedanteMax.idPCAccordee}= #{planClaculePrecedantMax.idPCAccordee}  
																   where #{versionDroitMax.idDroit} = #{droitPrcedant.idDroit}
																     and (#{pcaPrecedanteMax.dateFin} is null or #{pcaPrecedanteMax.dateFin}=0)
																     and #{versionDroitMax.noVersion} < #{droitCourant.noVersion}
													              )
								 ]]>
						</search-literal>
					</search-group>
				</search-group>
				
			</search-group>
		</search-definition>

		<search-definition name="wasAugementationFutur">
			<search-group operator="AND">
				<search-literal>
					<declare-model name="pca" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee"/>
					<![CDATA[ 
						(1 = (select count (*) 
					  		    from @{pca} 
					  		   where #{pca.dateDebut}  = #{pcaPrecedante.dateDebut} 
					  		     and #{pca.idVersionDroit}  = #{pcaPrecedante.idVersionDroit} 
					  		     and #{pca.dateFin} = #{pcaPrecedante.dateFin} 
					  		)
					  	
					  		or (
					  			#{simplePrestationsAccordees.idTiersBeneficiaire} = #{prestationsAccordeesPrecedante.idTiersBeneficiaire} 
					  			and  1 < (select count (*) 
								  		    from @{pca} 
								  		   where #{pca.dateDebut}  = #{pcaPrecedante.dateDebut} 
								  		     and #{pca.idVersionDroit}  = #{pcaPrecedante.idVersionDroit} 
								  		     and #{pca.dateFin} = #{pcaPrecedante.dateFin} 
					  					)
					  		)
					  	)
					]]>
				</search-literal>
				<search-field name="forDateMonthFutur" operation="EQUALS" field-ref="pcaCourant.dateDebut"/>
				<search-field name="forIsSupprime" operation="EQUALS" field-ref="pcaCourant.isSupprime" />	
				<search-field name="forIsSupprime" operation="EQUALS" field-ref="pcaPrecedante.isSupprime" />>
				
				<search-group operator="OR">
					<search-field name="inEtatDroitPrecedant" operation="IN" field-ref="droitPrcedant.csEtatDroit" /><!-- historisé -->
					<search-group operator="AND">
						<search-literal>
							<![CDATA[#{pcaPrecedante.idPCAccordee} = #{pcaCourant.idPCAccordee} ]]>
						</search-literal>
						<search-field name="inEtatDroitCourant" operation="IN" field-ref="droitPrcedant.csEtatDroit" />	<!-- Octroy(valide) pi Courant validé -->
						<search-field name="forIdPcaParent" operation="EQUALS" field-ref="droitCourant.noVersion" value="1" />	<!-- Octroy(valide) pi Courant validé -->
					</search-group>
				</search-group>

				<search-field name="forIsPlanRetenu" operation="EQUALS" field-ref="planClaculePrecedant.isPlanRetenu"/>
				<search-field name="forIsPlanRetenu" operation="EQUALS" field-ref="planClaculeCourant.isPlanRetenu"/>
			
			<!-- <search-field name="forIdPcaParent" operation="NULL" field-ref="pcaPrecedante.idPcaParent"/> -->
				
				<search-field name="forDateDecisionMin" operation="GREATER_OR_EQUALS" field-ref="simpleDecisionHeader.dateDecision"/>
				<search-group operator="OR"> 
					<search-field name="forDateDecisionMax" operation="LESS_OR_EQUALS"  field-ref="simpleDecisionHeader.dateDecision"/>
				</search-group>
				
				<search-field name="forCsEtat" operation="EQUALS" field-ref="simpleDecisionHeader.csEtatDecision" value="64028003" />
				
				<search-literal>
					<declare-model name="versionDroitMax" model-ref="ch.globaz.pegasus.business.models.droit.SimpleVersionDroit"/>
					<declare-model name="pcaPrecedanteMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee"/>
					<declare-model name="planClaculePrecedantMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePlanDeCalcul"/>
					<![CDATA[ 
						((#{droitPrcedant.noVersion} = (select max(#{versionDroitMax.noVersion} ) 
														from @{versionDroitMax} 
													   inner join @{pcaPrecedanteMax} 
													      on ( #{versionDroitMax.idVersionDroit} = #{pcaPrecedanteMax.idVersionDroit} )
													   inner join  @{planClaculePrecedantMax}
													      on (#{pcaPrecedanteMax.idPCAccordee}= #{planClaculePrecedantMax.idPCAccordee} ) 
													   where #{versionDroitMax.idDroit} = #{droitPrcedant.idDroit}
													   	  and ( #{versionDroitMax.noVersion} < #{droitCourant.noVersion} or  #{droitCourant.noVersion}  = 1)
					          						      and ( #{versionDroitMax.csEtatDroit} IN ( 64003005 )
					               						   		or ( #{versionDroitMax.csEtatDroit} IN ( 64003006, 64003004, 64003005 )
					                    				 			and #{droitCourant.noVersion} = 1
					                    				 	  	)
					                    				 	  )
					                    				  and ( #{pcaPrecedanteMax.dateFin} = #{pcaCourant.dateFin}
										                      or ( (
										                      	( #{pcaPrecedanteMax.dateFin}  is null or #{pcaPrecedanteMax.dateFin}  = 0)
										                      		or (
										                      			#{pcaPrecedanteMax.dateFin} >= #{pcaCourant.dateDebut}
										                      			and #{pcaCourant.dateFin}  <= #{pcaPrecedanteMax.dateFin}
										                      			and ( #{pcaCourant.dateFin} is not null AND #{pcaCourant.dateFin} <> 0  )
										                      		 )
										                      	)
										                           AND ( #{pcaPrecedanteMax.dateFin} <= #{pcaCourant.dateDebut}  ) )
										                      )
										                 ) 
							or (#{droitCourant.noVersion} = 1 
								and #{droitPrcedant.noVersion} = 1 
							)
						  )
						  and ( #{pcaPrecedante.dateFin} = #{pcaCourant.dateFin} 
						  	  or ((#{pcaPrecedante.dateFin}  is null 
						  	       or #{pcaPrecedante.dateFin} = 0 
						  	        or (#{pcaPrecedante.dateFin} >= #{pcaCourant.dateDebut}
						  	        	and #{pcaCourant.dateFin}<= #{pcaPrecedante.dateFin} 
						  	        	and  (#{pcaCourant.dateFin} <> 0 and #{pcaCourant.dateFin} is not null)
						  	        )
						  	       )
						  	  		and (#{pcaPrecedante.dateDebut} <= #{pcaCourant.dateDebut} )
						  	  )
						  )
						  and (#{pcaCourant.dateDebut} <= #{pcaCourant.dateFin} 
						  	or (#{pcaCourant.dateFin} = 0 or #{pcaCourant.dateFin} is null)
						  )
						  and #{pcaPrecedante.idPCAccordee} <> #{pcaCourant.idPCAccordee}  
						  and #{droitCourant.noVersion} <> #{droitPrcedant.noVersion}
						  or (#{droitCourant.noVersion} = 1 
						  	and #{droitPrcedant.noVersion} = 1  
						  	and #{pcaPrecedante.idPCAccordee} = #{pcaCourant.idPCAccordee}
						  )
						)
					 ]]>
				</search-literal>
				
				<search-group operator="OR">
					<search-group operator="AND">			
						<search-field name="inTypeDecision" operation="IN" field-ref="simpleDecisionHeader.csTypeDecision" value="64042006, 64042003, 64042005, 64042004" /> <!--CS_TYPE_ADAPTATION_AC, CS_TYPE_OCTROI_AC, CS_TYPE_PARTIEL_AC, CS_TYPE_REFUS_AC, CS_TYPE_REFUS_AC -->
					<!-- <search-field name="forIdPcaParent" operation="NULL" field-ref="pcaCourant.idPcaParent"/> -->
					</search-group>
					<!-- Pour les décisions de supression -->
					<search-group operator="AND">
						<search-field name="inTypeDecision" operation="IN" field-ref="simpleDecisionHeader.csTypeDecision" value="64042002" /> <!--CS_TYPE_SUPPRESSION_SC-->
						<search-literal>
							<declare-model name="versionDroitMax" model-ref="ch.globaz.pegasus.business.models.droit.SimpleVersionDroit"/>
							<declare-model name="pcaPrecedanteMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePCAccordee"/>
							<declare-model name="planClaculePrecedantMax" model-ref="ch.globaz.pegasus.business.models.pcaccordee.SimplePlanDeCalcul"/>
						<![CDATA[ 
									#{pcaCourant.isSupprime} = 2 and
								    #{droitPrcedant.noVersion} = (select max(#{versionDroitMax.noVersion} ) 
																	from @{versionDroitMax} 
																   inner join @{pcaPrecedanteMax} 
																      on #{versionDroitMax.idVersionDroit} = #{pcaPrecedanteMax.idVersionDroit} 
																   inner join  @{planClaculePrecedantMax}
																      on #{pcaPrecedanteMax.idPCAccordee}= #{planClaculePrecedantMax.idPCAccordee}  
																   where #{versionDroitMax.idDroit} = #{droitPrcedant.idDroit}
																     and (#{pcaPrecedanteMax.dateFin} is null or #{pcaPrecedanteMax.dateFin}=0)
																     and #{pcaPrecedanteMax.idPCAccordee} = #{pcaPrecedante.idPCAccordee}
													              )
							 ]]>
						</search-literal>
					</search-group>
				</search-group>
			</search-group>
		</search-definition>

		<order-by>
			<order-field field-ref="typePcActuel" order="ASC"/>
			<order-field field-ref="nom" order="ASC"/>
			<order-field field-ref="prenom" order="ASC"/>
			<order-field field-ref="dateDebutPcaActuel" order="DESC"/>
		</order-by>	
	</complexe-model>
</model-mapping>